@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@using Nop.Services.Catalog
@using Nop.Core.Domain.Catalog
@using Nop.Plugin.Misc.UniversityWafer
@using Nop.Web.Models.Catalog
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;

    var uwService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Plugin.Misc.UniversityWafer.Services.UwCatalogService>();

    var products = uwService.GetProductCatalog(Model.Id);

    foreach(var prod in products.UWProductDetails)
    {
        prod.AddToCart = new ProductDetailsModel.AddToCartModel()
        {
            DisableBuyButton = prod.DisableBuyButton,
            ProductId = prod.Id,
            EnteredQuantity = 1
        };
    }

    /*var catagoryService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Services.Catalog.ICategoryService>();
    var productService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Services.Catalog.IProductService>();
    var specService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Services.Catalog.ISpecificationAttributeService>();
    var productModelFactory = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Web.Factories.IProductModelFactory>();
    var leadTimeService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Services.Shipping.Date.IDateRangeService>();


    var allSpec = specService.GetSpecificationAttributes().Where(s => s.DisplayOrder < 100).ToList();

    var allCatagoryProducts = catagoryService.GetProductCategoriesByCategoryId(Model.Id);
    //var allProducts = productService.GetProductsByIds()
    //var allProds = productModelFactory.
    var products = productService.SearchProducts(categoryIds: new List<int>() { Model.Id });

    var tierPrices = productService.GetTierPricesByProduct(Model.Id);

    var leadTimes = leadTimeService.GetAllProductAvailabilityRanges();
    var leadTime = "";

    //if (leadTimes.Any(lt => lt.Id.Equals(product.ProductAvailabilityRangeId)))
    //{
    //  leadTime = leadTimes.First(lt => lt.Id.Equals(product.ProductAvailabilityRangeId)).Name;
    //}
    var prices = new[] { 1, 5, 10, 25, 50, 100, 200, 500 };*/
}

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
<div class="page category-page from-panel">
    @await Component.InvokeAsync("TopicBlock", new { systemName = "HomepageText" })
    <div class="page-title panel-heading">
        <h1>@Model.Name</h1>
    </div>

    <div class="page-body panel-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })
        @*subcategories*@
        @if (Model.SubCategories.Count > 0)
        {
            <div class="sub-category-grid row">
                @foreach (var item in Model.SubCategories)
                {
                    <div class="item-box col-xs-12 col-sm-3 col-md-3">
                        <div class="sub-category-item thumbnail">
                            <h3 class="title" style="padding: 10px; background-color: #e4dbd0;">
                                <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                    @item.Name
                                </a>
                            </h3>
                        </div>
                    </div>
                }
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="featured-product-grid row">
                <div class="title">
                    <strong>@T("Products.FeaturedProducts")</strong>
                </div>
                <div class="product-grid">
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="item-box col-xs-12 col-sm-4 col-md-4 product-align">
                            <div class="thumbnail">
                                @await Html.PartialAsync("_ProductBox", item)
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })
        @*product grid and list*@
        @if (products.UWProductDetails.Any())
        {
            <div class="product-grid clearfix">
                <div>
                    <table class="table table-striped table-bordered table-sm text-center"
                           id="product-table"
                           data-filter-control="true"
                           data-show-search-clear-button="true"
                           data-toggle="table"
                           data-show-columns="true"
                           data-sticky-header="true"
                           data-fixed-columns="true"
                           data-fixed-number="2"
                           data-pagination="true"
                           data-search="true"
                           data-show-jump-to="true"
                           data-show-multi-sort="true"
                           data-show-multi-sort-button="true"
                           data-multi-sort-strict-sort="true"
                           cellspacing="0"
                           width="100%">
                        <thead class="sticky-header">
                            <tr style="background-color:#555656; color:white;">
                                <th rowspan="2" style="min-width:80px;">Qty</th>
                                <th rowspan="2" data-field="id" data-filter-control="input" data-sortable="true" style="max-width:120px;">Id</th>
                                @foreach (var spec in products.SpecificationAttributes)
                                {
                                    <th rowspan="2" data-field="@spec" data-filter-control="select" data-sortable="true">@spec</th>
                                }
                                <th rowspan="2" data-filter-control="select" data-sortable="true">Lead Time</th>
                                <th rowspan="2">Quantity</th>
                                <th colspan="@products.Prices.Length">Unit Price</th>
                                <th rowspan="2" style="min-width:190px;">Description</th>
                            </tr>
                            <tr style="background-color:#555656; color:white;max-height:60px;">
                                @foreach (var price in products.Prices)
                                {
                                    <th>@price</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in products.UWProductDetails)
                            {
                                <tr>
                                    <td style="max-width:75px;">
                                        @if (!product.DisableBuyButton)
                                        {
                                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{product.Id}";
                                            @await Html.PartialAsync("_AddToCart", product.AddToCart, dataDictAddToCart);
                                        }
                                    </td>
                                    <td style="max-width:120px;">@product.Sku</td>
                                    @foreach (var spec in products.SpecificationAttributes)
                                    {
                                        var finalSpec = "";
                                        if (product.ProductSpecifications.ContainsKey(spec))
                                        {
                                            finalSpec = product.ProductSpecifications[spec];
                                        }

                                        <td>@Html.Raw(finalSpec)</td>
                                    }
                                    <td>@product.LeadTime</td>
                                    <td>@product.StockQuantity</td>
                                    @foreach (var price in products.Prices)
                                    {
                                        if (product.TierPrices.Any(tp => tp.Quantity.Equals(price)))
                                        {
                                            var tierPrice = product.TierPrices.First(tp => tp.Quantity.Equals(price));
                                            if (tierPrice.Quantity != 25)
                                            {
                                                <td>@tierPrice.Price.ToString("c2")</td>
                                            }
                                            else
                                            {
                                                <td style="color:white;background-color:green;">@tierPrice.Price.ToString("c2")</td>
                                            }
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                    }
                                    <td style="min-width:190px;">@Html.Raw(product.FullDescription)</td>
                                </tr>
                                @*await Html.PartialAsync("_ProductBox", product)*@
                            }
                        </tbody>
                    </table>
                    @*foreach (var product in Model.Products)
                        {
                            <div class="item-box @(Model.PagingFilteringContext.ViewMode == "list" ? "product-list col-xs-12 col-sm-12 col-md-12 product-align" : "product-grid col-xs-12 col-sm-4 col-md-4 product-align")">
                                <div class="thumbnail">
                                    @await Html.PartialAsync("_ProductBox", product)
                                </div>
                            </div>
                        }*@
                </div>
            </div>
        }

        <div class="pager clearfix">
            @{

                var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
            }
            @if (!pager.IsEmpty())
            {
                @pager
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
        </div>
    </div>
</div>

<script asp-location="Footer">
    $(document).ready(function () {
        var orientationValues = []
        $(".form-control.bootstrap-table-filter-control-Orientation").each(function () {
            var optionVal = $(this).val();
            if (orientationValues.find(s => s === optionVal) === undefined) {
                orientationValues.push(optionVal);
            }
        });
        //alert(orientationValues.toString());
    });

    function addToCartOnClick(productId, shoppingCartId) {       
        var enteredQtyVal = $('#product_enteredQuantity_' + productId).val();

        var serializedData = "addtocart_" + productId + ".UpdatedShoppingCartItemId=" + productId;
        serializedData += "&addtocart_" + productId + ".EnteredQuantity=" + enteredQtyVal;

        AjaxCart.addproducttocart_details_uw("/addproducttocart/details/" + productId + "/" + shoppingCartId, serializedData);
        
        return false;
    }

</script>