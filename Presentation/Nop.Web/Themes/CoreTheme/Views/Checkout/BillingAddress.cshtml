@using Nop.Core
@using Nop.Services.Customers
@model CheckoutBillingAddressModel
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject ICustomerService _customerService
@{
    Layout = "_ColumnsOne";

    //scripts
    Html.AddScriptParts(ResourceLocation.Footer, "~/js/public.billingaddress.js");

    var storeLocation = webHelper.GetStoreLocation();

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
    Html.AppendPageCssClassParts("html-billing-address-page");
}
@await Component.InvokeAsync("CheckoutProgress", new { step = CheckoutProgressStep.Address })
<div class="page checkout-page from-panel">
    <div class="page-title panel-heading">
        <h1>@T("Checkout.BillingAddress")</h1>
    </div>
    <div class="page-body checkout-data panel-body">
        <form id="billing-form" asp-route="CheckoutBillingAddress" method="post">
            <div class="billing-addresses">
                <div id="toggle-billing-address">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutBillingAddressTop })
                    @if (Model.ShipToSameAddressAllowed)
                    {
                        <div class="section ship-to-same-address">
                            <div class="form-group">
                                <div class="row">
                                    <div class="selector col-md-12">
                                        <input asp-for="ShipToSameAddress" />
                                        <label asp-for="ShipToSameAddress">@T("Checkout.ShipToSameAddress")</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    @if (Model.ExistingAddresses.Count > 0)
                    {
                        <div class="section select-billing-address">
                            <div class="title small-heading">
                                <strong>@T("Checkout.SelectBillingAddress")</strong>
                            </div>
                            @if (Model.InvalidExistingAddresses.Count > 0)
                            {
                                <label class="min-amount-warning">
                                    @string.Format(T("Checkout.Addresses.Invalid").Text, Model.InvalidExistingAddresses.Count)
                                </label>
                            }
                            <div class="address-grid row">
                                @foreach (var item in Model.ExistingAddresses)
                                {
                                    <div class="address-item col-xs-12 col-sm-4 col-md-4">
                                        <div class="select-button">
                                            <button type="button" class="btn btn-default select-billing-address-button" onclick="selectBillingAddress@(item.Id)()">@T("Checkout.BillToThisAddress")</button>
                                            <script asp-location="Footer">
                                                function selectBillingAddress@(item.Id)() {
                                                    if ($('#@Html.IdFor(model => model.ShipToSameAddress)').is(':checked')) {
                                                        setLocation('@Html.Raw(Url.RouteUrl("CheckoutSelectBillingAddress", new {addressId = item.Id, shipToSameAddress = "true"}))');
                                                    } else {
                                                        setLocation('@Url.RouteUrl("CheckoutSelectBillingAddress", new {addressId = item.Id })');
                                                    }
                                                }
                                            </script>
                                        </div>
                                        <div class="address-list-page">
                                            <button id="edit-button-@(item.Id)" type="button" class="button-2 edit-address-button" onclick="CheckoutBilling.editAddress('@(storeLocation)checkout/GetAddressById/', @(item.Id)); return false;">@T("Common.Edit")</button>

                                            <button id="delete-button-@(item.Id)" type="button" class="button-2 delete-address-button" onclick="CheckoutBilling.deleteEditAddress('@(storeLocation)checkout/DeleteEditAddress/', @(item.Id)); return false;">@T("Common.Delete")</button>
                                        </div>
                                        <ul class="address-box">
                                            <li class="name">
                                                <strong>@item.FirstName @item.LastName</strong>
                                            </li>
                                            <li class="email">@T("Address.Fields.Email"): @item.Email</li>
                                            @if (item.PhoneEnabled)
                                            {
                                                <li class="phone">
                                                    @T("Address.Fields.PhoneNumber"):
                                                    @item.PhoneNumber
                                                </li>
                                            }
                                            @if (item.FaxEnabled)
                                            {
                                                <li class="fax">
                                                    @T("Address.Fields.FaxNumber"):
                                                    @item.FaxNumber
                                                </li>
                                            }
                                            @if (item.CompanyEnabled && !string.IsNullOrEmpty(item.Company))
                                            {
                                                <li class="company">
                                                    @item.Company
                                                </li>
                                            }
                                            @if (item.StreetAddressEnabled)
                                            {
                                                <li class="address1">
                                                    @item.Address1
                                                </li>
                                            }
                                            @if (item.StreetAddress2Enabled && !string.IsNullOrEmpty(item.Address2))
                                            {
                                                <li class="address2">
                                                    @item.Address2
                                                </li>
                                            }
                                            @if (item.CityEnabled && !string.IsNullOrEmpty(item.City) ||
                                                  item.CountyEnabled && !string.IsNullOrEmpty(item.County) ||
                                                  item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                                  item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                            {
                                                <li class="city-state-zip">
                                                    @if (item.CityEnabled && !string.IsNullOrEmpty(item.City))
                                                    {
                                                        @item.City
                                                        @if (item.CountyEnabled && !string.IsNullOrEmpty(item.County) ||
                                                     item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                                     item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                        {
                                                            <text>,</text>
                                                        }
                                                    }
                                                    @if (item.CountyEnabled && !string.IsNullOrEmpty(item.County))
                                                    {
                                                        @item.County
                                                        @if (item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                                     item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                        {
                                                            <text>,</text>
                                                        }
                                                    }
                                                    @if (item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName))
                                                    {
                                                        @item.StateProvinceName
                                                        @if (item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                        {
                                                            <text>,</text>
                                                        }
                                                    }
                                                    @if (item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                    {
                                                        @item.ZipPostalCode
                                                    }
                                                </li>
                                            }
                                            @if (item.CountryEnabled && !string.IsNullOrEmpty(item.CountryName))
                                            {
                                                <li class="country">
                                                    @item.CountryName
                                                </li>
                                            }
                                            @if (!string.IsNullOrEmpty(item.FormattedCustomAddressAttributes))
                                            {
                                                <li class="custom-attributes-view">
                                                    @Html.Raw(item.FormattedCustomAddressAttributes)
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutBillingAddressMiddle })
                <div class="section new-billing-address" id="billingaddress-new-form">
                    <div class="title small-heading">
                        @if (Model.ExistingAddresses.Count > 0)
                        {
                            <strong class="title-text">@T("Checkout.OrEnterNewAddress")</strong>
                        }
                        else
                        {
                            <strong>@T("Checkout.EnterBillingAddress")</strong>
                        }
                    </div>
                    <div class="enter-address">
                        <div asp-validation-summary="ModelOnly" class="message-error"></div>
                        <div class="enter-address-body form-horizontal">
                            @{
                                var dataDictAddress = new ViewDataDictionary(ViewData);
                                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                                @await Html.PartialAsync("_CreateOrUpdateAddress", Model.BillingNewAddress, dataDictAddress)
                            }
                        </div>
                    </div>
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutBillingAddressBottom })
                <div class="form-group row next-btn-wrapper">
                    <div class="col-md-6">
                        <button id="billingaddress-save-button" type="button" class="btn btn-primary" style="display: none" onclick="CheckoutBilling.saveEditAddress('@(storeLocation)checkout/SaveEditAddress/'); return false;">@T("Common.Save")</button>

                        <button id="billingaddress-cancel-button" type="button" class="btn btn-primary" style="display: none" onclick="setLocation('@Url.RouteUrl("CheckoutBillingAddress")')">@T("Common.Cancel")</button>

                        <button id="billingaddress-next-button" type="submit" name="nextstep" class="btn btn-primary  new-address-next-step-button">@T("Checkout.NextButton")</button>
                    </div>
                </div>
                <script asp-location="Footer">
                    CheckoutBilling.init('#billing-form');
                    if (@((await _customerService.IsGuestAsync(await workContext.GetCurrentCustomerAsync())).ToString().ToLowerInvariant())) {
                        $('button.edit-address-button').show();
                        $('button.delete-address-button').show();
                    }
                </script>
                <div class="section order-summary-body">
                    <div class="title small-heading">
                        <strong>@T("Checkout.OrderSummary")</strong>
                    </div>
                    @await Component.InvokeAsync("OrderSummary")
                </div>
            </div>
        </form>
    </div>
</div>
